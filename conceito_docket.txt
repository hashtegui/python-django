Docker


o conceito de Docker está na "Divisão" ou seja, trabalhar com conteiners


o Docker utiliza funções presentes no Kernel do Linux

chroot - Reponsavel por mapear os diretórios do S.O. e criar o ponto de montagem (/, /etc, /dev, /proc entre outros).
cgroup - Reponsável por controlar os recursos por processo. Com ele podemos por exemplo limitar o uso de memória e/ou processador para um processo específico.
kernel namespace - Com ele podemos isolar processos, ponto de montagem entre outras coisas. Com esse isolamento, conseguimos a sensação de estar usando uma máquina diferente da máquina host. Pois enxergamos somente o ponto de montagem especifico e processos especificos, inclusive nossos processos começam com PID baixo.
kernel capabilities - Entre outras coisas, conseguimos rodar alguns comandos de forma privilegiada.

Instalação

https://docs.docker.com/engine/install/ubuntu/

instalação via repositório

1 passo
************************
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
************************    
2 passo

Colocar chave GPG oficial do docker
********
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
*****

3 passo
Use the following command to set up the stable repository. To add the nightly or test repository, add the word nightly or test (or both) after the word stable in the commands below. 

***
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
****

4 passo
***
sudo apt-get install docker-ce docker-ce-cli containerd.io
*** 


conta docker

user: hashtegui
email: guilherme.castro.souza1999@gmail.com
senha: Guilherme@2021
    
sudo apt install docker-ce

****************
Substitui a Maquina virtual
 
leve, configurável

docker ps -a ** ver todos os containers
docker ps ** ver todos os conteiners ativos

docker run -it <nome da imagem> ** startar o container junto com o terminal interativo

docker start inicia o conteiner
docker start -a -i <id do conteiner> para iniciar com o terminal
docker stop <id> fecha o conteiner
docker stop -t 0 ** tempo


para remover um container

docker rm <id do container>

para remover todos

docker container prune

para ver todas as imagens

docker images

para remover uma imagem

docker rmi <nome da imagem>

***************

todas as imagens mais complexas tem mais de uma camada


***********

docker run -d -P <imagem> ** -d para rodar em segundo plano, -P para atribuir uma porta aleatória ao container


docker port <id> para saber a porta externa atribuida ao container

docker run -d -P --name <nome do container> <nome_imagem>

***************


-p serve para selecionar manualmente a porta que será atribuida ao container
-e para definir a variável de ambiente


docker run -d -p <porta externa>:<porta interna do container> -e <variavel de ambiente>--name meu-site dockersamples/static-site





*************
docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker start ID_CONTAINER - inicia o container com id em questão.
docker stop ID_CONTAINER - interrompe o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -d -P -e AUTHOR="Fulano" dockersamples/static-site - define uma variável de ambiente AUTHOR com o valor Fulano no container criado.

****


-v o comando atua como volume para o container, e toda informaçao gravada na pasta que o container faz link com a pasta externa, fica armazenada, se o container for excluido, a pasta continuará existindo

docker run -it -v "caminho da maquina externa:caminho da maquina interna" nome da imagem

** docker é capaz de criar ambientes de desenvolvimento com qualquer lingugem existente

o comando -w é para dizer ao docker qual pasta executar o comando apos imagem
docker run -d -p 8080:3000 -v "/home/suporte/Downloads/volume-exemplo:/var/www" -w "/var/www" node npm start


docker run -v "[CAMINHO_VOLUME_LOCAL:]CAMINHO_VOLUME_CONTAINER" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container, caso seja especificado um caminho local monta o volume local no volume do container.
docker inspect ID_CONTAINER - retorna diversas informações sobre o container.



criando o arquivo dockerfile

FROM node //imagem base
MAINTAINER GuilhermeCastro //mantenedor
COPY . /var/www //copiar tudo da pasta base Ou diretorio para diretorio remoto
RUN npm install // comando node para instalar dependencias
WORKDIR /var/www //definir o diretorio de funcionamento
ENTRYPOINT npm start // comando inicial
EXPOSE 3000 // porta interna de funcionamento

executando o dockerfile

-f para definir o nome do arquivo
-t para definir o mantenedor  diretorio do dockerfile

docker build -f dockerfile -t guilherme/node /home/suporte/Downloads/volume-exemplo

**************


network no docker


Conseguir comunicar containers entre si


default network do docker


default network não deixa se comunicar com hostname

criaçao de redes

comando para criaçao de redes

******

--driver: para informar qual driver a rede vai utilizar, 99% dos casos irão usar o driver bridge

docker network create --driver bridge <nome da rede>

*****

verificar redes existentes

docker network ls


docker run -d --name meu-mongo --network minha-rede mongo

************
subir multiplos containers

Docker Compose



criando o docker compose   



*************************************


version: '3' ---------versao do docker compose
services: ---------- inicia a tag dos servicos
  nginx: ------ nome do servico
    build: 
      dockerfile: ./docker/ngix.dockerfile
      context: .
    image: douglasq/nginx
    container_name: nginx
    port: 
      - "80:80"
    networks:
      - production-network
    depends_on:
      - "node1"
      - "node2"
      - "node3"

  mongodb:
    image: mongo
    networks:
      - production-network
  
  node1:
    build: 
      dockerfile: ./docker/alura-books.dockerfile
      context: .
    image: douglasq/alura-books:cap05
    container_name: alura-books1
    port:
      - "3000"
    networks:
      - "production-network"
    depends_on:
      - "mongodb"
  node2:
    build: 
      dockerfile: ./docker/alura-books.dockerfile
      context: .
    image: douglasq/alura-books:cap05
    container_name: alura-books1
    port:
      - "3000"
    networks:
      - "production-network"
    depends_on:
      - "mongodb"

  node3:
    build: 
      dockerfile: ./docker/alura-books.dockerfile
      context: .
    image: douglasq/alura-books:cap05
    container_name: alura-books1
    port:
      - "3000"
    networks:
      - "production-network"
    
    depends_on:
      - "mongodb"


networks:
  production-network: 
    driver: bridge




*****************************************


instalacao do docker compose no linux


sudo curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose


sudo chmod +x /usr/local/bin/docker-compose



***** subindo os servicos

dentro da pasta onde se encontra o docker-compose.yml

docker-compose build


para buildar as imagens, caso nao estejam criadas

conferir  no docker images


para subir todos os servicos

docker-compose up

docker-compose up -d




Segue a lista com os principais comandos utilizados durante o curso:

Comandos relacionados às informações
docker version - exibe a versão do docker que está instalada.
docker inspect ID_CONTAINER - retorna diversas informações sobre o container.
docker ps - exibe todos os containers em execução no momento.
docker ps -a - exibe todos os containers, independentemente de estarem em execução ou não.
Comandos relacionados à execução
docker run NOME_DA_IMAGEM - cria um container com a respectiva imagem passada como parâmetro.
docker run -it NOME_DA_IMAGEM - conecta o terminal que estamos utilizando com o do container.
docker run -d -P --name NOME dockersamples/static-site - ao executar, dá um nome ao container e define uma porta aleatória.
docker run -d -p 12345:80 dockersamples/static-site - define uma porta específica para ser atribuída à porta 80 do container, neste caso 12345.
docker run -v "CAMINHO_VOLUME" NOME_DA_IMAGEM - cria um volume no respectivo caminho do container.
docker run -it --name NOME_CONTAINER --network NOME_DA_REDE NOME_IMAGEM - cria um container especificando seu nome e qual rede deverá ser usada.
Comandos relacionados à inicialização/interrupção
docker start ID_CONTAINER - inicia o container com id em questão.
docker start -a -i ID_CONTAINER - inicia o container com id em questão e integra os terminais, além de permitir interação entre ambos.
docker stop ID_CONTAINER - interrompe o container com id em questão.
Comandos relacionados à remoção
docker rm ID_CONTAINER - remove o container com id em questão.
docker container prune - remove todos os containers que estão parados.
docker rmi NOME_DA_IMAGEM - remove a imagem passada como parâmetro.
Comandos relacionados à construção de Dockerfile
docker build -f Dockerfile - cria uma imagem a partir de um Dockerfile.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM - constrói e nomeia uma imagem não-oficial.
docker build -f Dockerfile -t NOME_USUARIO/NOME_IMAGEM CAMINHO_DOCKERFILE - constrói e nomeia uma imagem não-oficial informando o caminho para o Dockerfile.
Comandos relacionados ao Docker Hub
docker login - inicia o processo de login no Docker Hub.
docker push NOME_USUARIO/NOME_IMAGEM - envia a imagem criada para o Docker Hub.
docker pull NOME_USUARIO/NOME_IMAGEM - baixa a imagem desejada do Docker Hub.
Comandos relacionados à rede

hostname -i - mostra o ip atribuído ao container pelo docker (funciona apenas dentro do container).
docker network create --driver bridge NOME_DA_REDE - cria uma rede especificando o driver desejado.
Comandos relacionados ao docker-compose

docker-compose build - Realiza o build dos serviços relacionados ao arquivo docker-compose.yml, assim como verifica a sua sintaxe.
docker-compose up - Sobe todos os containers relacionados ao docker-compose, desde que o build já tenha sido executado.
docker-compose down - Para todos os serviços em execução que estejam relacionados ao arquivo docker-compose.yml.






